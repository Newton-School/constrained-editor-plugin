import validators from"./utils/validators.js";import{TypeMustBe}from"./utils/definedErrors.js";import constrainedModel from"./constrainedModel.js";export function constrainedEditor(e){if(void 0===e)throw new Error(["Please pass the monaco global variable into function as","(eg:)constrainedEditor({ range : monaco.range });"].join("\n"));const n=function(e){const n=e.getModel();if(n._isCursorAtCheckPoint){const t=e.getSelections(),o=t.map((function(e){return{lineNumber:e.positionLineNumber,column:e.positionColumn}}));n._isCursorAtCheckPoint(o),n._currentCursorPositions=t}},t={},{isInstanceValid:o,isModelValid:i,isRangesValid:r}=validators.initWith(e),s={_listener:null,_editorInstance:null,_uriRestrictionMap:t,_injectedResources:e},d=Object.create(s),a={initializeIn:function(e){if(o(e)){let t=e.getDomNode();return s._listener=n.bind(d,e),s._editorInstance=e,s._editorInstance._isInDevMode=!1,t.addEventListener("keydown",s._listener,!0),s._onChangeModelDisposable=e.onDidChangeModel((function(){t&&t.removeEventListener("keydown",s._listener,!0);const n=e.getDomNode();n&&n.addEventListener("keydown",s._listener,!0),t=n})),!0}throw new Error(TypeMustBe("ICodeEditor","editorInstance","This type interface can be found in monaco editor documentation"))},addRestrictionsTo:function(n,o){if(i(n)){if(r(o)){const i=constrainedModel(n,o,e,s._editorInstance);return t[i.uri.toString()]=i,i}throw new Error(TypeMustBe("Array<RangeRestrictionObject>","ranges","Please refer constrained editor documentation for proper structure"))}throw new Error(TypeMustBe("ICodeEditor","editorInstance","This type interface can be found in monaco editor documentation"))},removeRestrictionsIn:function(e){if(i(e)){const n=e.uri.toString(),o=t[n];return o?o.disposeRestrictions():(console.warn("Current Model is not a restricted Model"),!1)}throw new Error(TypeMustBe("ICodeEditor","editorInstance","This type interface can be found in monaco editor documentation"))},disposeConstrainer:function(){if(s._editorInstance){const e=s._editorInstance.getDomNode();e&&e.removeEventListener("keydown",s._listener),s._onChangeModelDisposable&&s._onChangeModelDisposable.dispose(),delete s._listener,delete s._editorInstance._isInDevMode,delete s._editorInstance._devModeAction,delete s._editorInstance,delete s._onChangeModelDisposable;for(let e in t)delete t[e];return!0}return!1},toggleDevMode:function(){s._editorInstance._isInDevMode?(s._editorInstance._isInDevMode=!1,s._editorInstance._devModeAction.dispose(),delete s._editorInstance._devModeAction):(s._editorInstance._isInDevMode=!0,s._editorInstance._devModeAction=s._editorInstance.addAction({id:"showRange",label:"Show Range in console",contextMenuGroupId:"navigation",contextMenuOrder:1.5,run:function(e){const n=e.getSelections().reduce((function(e,{startLineNumber:n,endLineNumber:t,startColumn:o,endColumn:i}){return e.push("range : "+JSON.stringify([n,o,t,i])),e}),[]).join("\n");console.log("Selected Ranges : \n"+JSON.stringify(n,null,2))}}))}};for(let e in a)Object.defineProperty(d,e,{enumerable:!1,writable:!1,configurable:!1,value:a[e]});return Object.freeze(d)}export default constrainedEditor;